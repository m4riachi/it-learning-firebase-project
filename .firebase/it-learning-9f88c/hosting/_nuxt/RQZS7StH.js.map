{"version":3,"file":"RQZS7StH.js","sources":["../../../../node_modules/nuxt/dist/pages/runtime/composables.js","../../../../composables/helpers.ts"],"sourcesContent":["import { getCurrentInstance } from \"vue\";\nimport { useRoute } from \"vue-router\";\nimport { useNuxtApp } from \"#app/nuxt\";\nconst warnRuntimeUsage = (method) => {\n  console.warn(\n    `${method}() is a compiler-hint helper that is only usable inside the script block of a single file component which is also a page. Its arguments should be compiled away and passing it at runtime has no effect.`\n  );\n};\nexport const definePageMeta = (meta) => {\n  if (import.meta.dev) {\n    const component = getCurrentInstance()?.type;\n    try {\n      const isRouteComponent = component && useRoute().matched.some((p) => Object.values(p.components || {}).includes(component));\n      const isRenderingServerPage = import.meta.server && useNuxtApp().ssrContext?.islandContext;\n      if (isRouteComponent || isRenderingServerPage || component?.__clientOnlyPage) {\n        return;\n      }\n    } catch {\n    }\n    warnRuntimeUsage(\"definePageMeta\");\n  }\n};\nexport const defineRouteRules = /* @__NO_SIDE_EFFECTS__ */ (rules) => {\n};\n","import {ToastEnum, useErrorHandlerStore} from \"~/composables/stores/error-handler\";\n\nexport const toastError = (title: string, message: string, timeout = 1000000) => {\n  const useErrorHandler = useErrorHandlerStore();\n  const fixedTimeout = 1000000; // this is to override any timeout passed in\n  useErrorHandler.addToast({\n    type: ToastEnum.error,\n    title,\n    message,\n    timeout: fixedTimeout,\n  });\n};\n\nexport const toastSuccess = (title: string, message: string, timeout = 3000) => {\n  const useErrorHandler = useErrorHandlerStore();\n  const fixedTimeout = 3000; // this is to override any timeout passed in\n  useErrorHandler.addToast({\n    type: ToastEnum.success,\n    title,\n    message,\n    timeout: fixedTimeout,\n  });\n};\n\nexport const toastWarning = (title: string, message: string, timeout = 1000000) => {\n  const useErrorHandler = useErrorHandlerStore();\n  const fixedTimeout = 1000000; // this is to override any timeout passed in\n  useErrorHandler.addToast({\n    type: ToastEnum.warning,\n    title,\n    message,\n    timeout: fixedTimeout,\n  });\n};\n\n\nexport const getErrorMessage = (code: string): string => {\n  switch (code) {\n    case 'auth/user-not-found':\n      return 'No account found with this email';\n    case 'auth/too-many-requests':\n      return 'Too many attempts. Please try again later'\n    case 'auth/email-already-in-use':\n      return 'Email address is already registered';\n    case 'auth/invalid-credential':\n      return 'No account found with this email';\n    case 'auth/wrong-password':\n      return 'Incorrect password';\n    case 'auth/invalid-email':\n      return 'Invalid email address';\n    default:\n      return 'An error occurred during sign in';\n  }\n}\n"],"names":["warnRuntimeUsage","method","definePageMeta","meta","component","_a","getCurrentInstance","useRoute","p","toastError","title","message","timeout","useErrorHandlerStore","ToastEnum","getErrorMessage","code"],"mappings":"kFAGA,MAAMA,EAAoBC,GAAW,CACnC,QAAQ,KACN,GAAGA,CAAM,0MACV,CACH,EACaC,EAAkBC,GAAS,OACjB,CACnB,MAAMC,GAAYC,EAAAC,EAAkB,IAAlB,YAAAD,EAAsB,KACxC,GAAI,CAGF,GAFyBD,GAAaG,EAAU,EAAC,QAAQ,KAAMC,GAAM,OAAO,OAAOA,EAAE,YAAc,CAAE,CAAA,EAAE,SAASJ,CAAS,CAAC,GAC5F,IACmBA,GAAA,MAAAA,EAAW,iBAC1D,MAER,MAAY,CACZ,CACIJ,EAAiB,gBAAgB,CACrC,CACA,ECnBaS,EAAa,CAACC,EAAeC,EAAiBC,EAAU,MAAY,CACvDC,EAAqB,EAE7B,SAAS,CACvB,KAAMC,EAAU,MAChB,MAAAJ,EACA,QAAAC,EACA,QALmB,GAKV,CACV,CACH,EAyBaI,EAAmBC,GAAyB,CACvD,OAAQA,EAAM,CACZ,IAAK,sBACI,MAAA,mCACT,IAAK,yBACI,MAAA,4CACT,IAAK,4BACI,MAAA,sCACT,IAAK,0BACI,MAAA,mCACT,IAAK,sBACI,MAAA,qBACT,IAAK,qBACI,MAAA,wBACT,QACS,MAAA,kCAAA,CAEb","x_google_ignoreList":[0]}